const bcrypt = require('bcrypt');
const db = require('./config/connexion_db');

// Fonction pour attendre que MySQL soit pr√™t
async function waitForDatabase(maxAttempts = 30) {
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        try {
            console.log(`üîÑ Tentative de connexion √† la base de donn√©es (${attempt}/${maxAttempts})...`);
            await db.execute('SELECT 1');
            console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie !');
            return true;
        } catch (error) {
            console.log(`‚è≥ Attente de MySQL... (${attempt}/${maxAttempts})`);
            await new Promise(resolve => setTimeout(resolve, 2000)); // Attendre 2 secondes
        }
    }
    throw new Error('Impossible de se connecter √† la base de donn√©es apr√®s plusieurs tentatives');
}

async function initializeAdmin() {
    try {
        console.log('üîß Initialisation de l\'utilisateur admin...');
        
        // Attendre que MySQL soit pr√™t
        await waitForDatabase();
        
        // V√©rifier si l'admin existe d√©j√†
        const [existingUser] = await db.execute(
            'SELECT id_user FROM users WHERE email = ?',
            ['admin@admin.com']
        );
        
        if (existingUser.length === 0) {
            console.log('‚ûï Cr√©ation de l\'utilisateur admin...');
            
            // Hasher le mot de passe
            const saltRounds = 10;
            const hashedPassword = await bcrypt.hash('adminadmin', saltRounds);
            
            // Ins√©rer l'utilisateur admin
            await db.execute(
                `INSERT INTO users (nom, prenom, email, mot_de_passe, role, photo)
                 VALUES (?, ?, ?, ?, ?, ?)`,
                ['Admin', 'System', 'admin@admin.com', hashedPassword, 'admin', null]
            );
            
            console.log('‚úÖ Utilisateur admin cr√©√© avec succ√®s !');
        } else {
            console.log('‚úÖ Utilisateur admin existe d√©j√†.');
        }
        
        // V√©rifier que le hash est correct
        const [userForTest] = await db.execute(
            'SELECT mot_de_passe FROM users WHERE email = ?',
            ['admin@admin.com']
        );
        
        if (userForTest.length > 0) {
            const isValid = await bcrypt.compare('adminadmin', userForTest[0].mot_de_passe);
            if (!isValid) {
                console.log('‚ö†Ô∏è Hash incorrect, mise √† jour du mot de passe admin...');
                
                // Mettre √† jour le mot de passe
                const saltRounds = 10;
                const hashedPassword = await bcrypt.hash('adminadmin', saltRounds);
                
                await db.execute(
                    'UPDATE users SET mot_de_passe = ? WHERE email = ?',
                    [hashedPassword, 'admin@admin.com']
                );
                
                console.log('‚úÖ Mot de passe admin mis √† jour !');
            }
        }
        
        console.log('üìã Admin disponible : admin@admin.com / adminadmin');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation de l\'admin:', error.message);
        // Ne pas faire planter le serveur, juste logger l'erreur
    }
}

module.exports = initializeAdmin; 