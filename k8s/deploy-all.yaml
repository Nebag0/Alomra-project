# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: alomra
  labels:
    name: alomra
---
# MySQL Secret
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: alomra
type: Opaque
data:
  mysql-root-password: T21AcmAwMDM=  # Om@r2003
  mysql-user: cm9vdA==              # root
  mysql-password: T21AcmAwMDM=      # Om@r2003
  mysql-database: YWxvbXJh          # alomra
---
# MySQL ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
  namespace: alomra
data:
  mysql-host: mysql-service
  mysql-port: "3306"
  mysql-database: alomra
---
# MySQL Init ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-config
  namespace: alomra
data:
  init.sql: |
    -- Initialisation de la base de données Alomra
    USE alomra;

    -- Table des utilisateurs
    CREATE TABLE IF NOT EXISTS users (
        id_user INT PRIMARY KEY AUTO_INCREMENT,
        nom VARCHAR(100) NOT NULL,
        prenom VARCHAR(100) NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        mot_de_passe VARCHAR(255) NOT NULL,
        role ENUM('admin', 'superviseur') DEFAULT 'superviseur',
        photo VARCHAR(255)
    );

    -- Table des motifs
    CREATE TABLE IF NOT EXISTS motifs (
        id INT PRIMARY KEY AUTO_INCREMENT,
        nom VARCHAR(100) UNIQUE NOT NULL
    );

    -- Table des réclamations
    CREATE TABLE IF NOT EXISTS reclamations (
        id INT PRIMARY KEY AUTO_INCREMENT,
        nom_agent VARCHAR(100) NOT NULL,
        prenom_agent VARCHAR(100) NOT NULL,
        cin_agent VARCHAR(20) NOT NULL,
        description TEXT NOT NULL,
        date_reclamation DATE NOT NULL,
        site_affectation VARCHAR(100) NOT NULL,
        poste VARCHAR(100) NOT NULL,
        created_by INT NOT NULL,
        FOREIGN KEY (created_by) REFERENCES users(id_user)
    );

    -- Table de liaison réclamation-motif
    CREATE TABLE IF NOT EXISTS reclamation_motif (
        reclamation_id INT NOT NULL,
        motif_id INT NOT NULL,
        PRIMARY KEY (reclamation_id, motif_id),
        FOREIGN KEY (reclamation_id) REFERENCES reclamations(id),
        FOREIGN KEY (motif_id) REFERENCES motifs(id)
    );

    -- Insertion de l'utilisateur admin par défaut
    -- Email: admin@admin.com, Mot de passe: adminadmin (hashé avec bcrypt)
    INSERT INTO users (nom, prenom, email, mot_de_passe, role) VALUES 
    ('Admin', 'System', 'admin@admin.com', '$2b$10$sCrPGXow.pPs5snj8H5yFeCMSkcvz3psjGq7tfOuYK8BQB8Y2pJbS', 'admin')
    ON DUPLICATE KEY UPDATE mot_de_passe = VALUES(mot_de_passe);
---
# MySQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: alomra
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: alomra
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD 
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - name: mysql-init
          mountPath: /docker-entrypoint-initdb.d
        - name: mysql-data
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-init
        configMap:
          name: mysql-init-config
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-pvc
---
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: alomra
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  type: ClusterIP
---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: alomra
  labels:
    app: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: nebag/alomra-project-backend:latest
        ports:
        - containerPort: 5000
        env:
        - name: PORT
          value: "5000"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-host
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-port
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: JWT_SECRET
          value: "Qw8!zP3@kL9vT2$eR7^sN1&bM6*oJ4%uH5"
        - name: EMAIL_USER
          value: "nebag.omar.ensias.itclub@gmail.com"
        - name: EMAIL_PASS
          value: "onhj kjud dymj jxrl"
        - name: NOTIFY_EMAILS
          value: "nebag0s.07@gmail.com,r133319287@um5.ac.ma"
        - name: FRONTEND_URL
          value: "http://localhost:30100"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: alomra
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
      nodePort: 30001
  type: NodePort
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: alomra
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: nebag/alomra-project-frontend:latest
        ports:
        - containerPort: 3000
        env:
        - name: NEXT_PUBLIC_URL
          value: "http://backend-service:5000"
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: alomra
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
      nodePort: 30100
  type: NodePort
---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: alomra-ingress
  namespace: alomra
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  rules:
  - host: alomra.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3000
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 5000 